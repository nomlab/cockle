// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// InitDaemonClient is the client API for InitDaemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitDaemonClient interface {
	RunPhauls(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*Result, error)
	RunPhaulc(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Result, error)
}

type initDaemonClient struct {
	cc grpc.ClientConnInterface
}

func NewInitDaemonClient(cc grpc.ClientConnInterface) InitDaemonClient {
	return &initDaemonClient{cc}
}

func (c *initDaemonClient) RunPhauls(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/initdaemon.InitDaemon/RunPhauls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initDaemonClient) RunPhaulc(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/initdaemon.InitDaemon/RunPhaulc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitDaemonServer is the server API for InitDaemon service.
// All implementations must embed UnimplementedInitDaemonServer
// for forward compatibility
type InitDaemonServer interface {
	RunPhauls(context.Context, *ServerInfo) (*Result, error)
	RunPhaulc(context.Context, *ClientInfo) (*Result, error)
	mustEmbedUnimplementedInitDaemonServer()
}

// UnimplementedInitDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedInitDaemonServer struct {
}

func (UnimplementedInitDaemonServer) RunPhauls(context.Context, *ServerInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPhauls not implemented")
}
func (UnimplementedInitDaemonServer) RunPhaulc(context.Context, *ClientInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPhaulc not implemented")
}
func (UnimplementedInitDaemonServer) mustEmbedUnimplementedInitDaemonServer() {}

// UnsafeInitDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitDaemonServer will
// result in compilation errors.
type UnsafeInitDaemonServer interface {
	mustEmbedUnimplementedInitDaemonServer()
}

func RegisterInitDaemonServer(s grpc.ServiceRegistrar, srv InitDaemonServer) {
	s.RegisterService(&_InitDaemon_serviceDesc, srv)
}

func _InitDaemon_RunPhauls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitDaemonServer).RunPhauls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initdaemon.InitDaemon/RunPhauls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitDaemonServer).RunPhauls(ctx, req.(*ServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitDaemon_RunPhaulc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitDaemonServer).RunPhaulc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initdaemon.InitDaemon/RunPhaulc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitDaemonServer).RunPhaulc(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _InitDaemon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "initdaemon.InitDaemon",
	HandlerType: (*InitDaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunPhauls",
			Handler:    _InitDaemon_RunPhauls_Handler,
		},
		{
			MethodName: "RunPhaulc",
			Handler:    _InitDaemon_RunPhaulc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "initdaemon.proto",
}
